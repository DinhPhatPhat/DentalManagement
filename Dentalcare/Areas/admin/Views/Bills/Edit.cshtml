@model Dentalcare.Models.Bill

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/admin/Views/Shared/MyLayout.cshtml";
}

<h2 style="padding: 24px;">Chỉnh sửa</h2>

@using (Html.BeginForm("Edit", "Bills", FormMethod.Post, new { @style = "padding: 24px;" }))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Hóa đơn</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.id)

    <div class="form-group">
        @Html.LabelFor(model => model.totalPrice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.totalPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.totalPrice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ServicesPrice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ServicesPrice, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ServicesPrice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Bill_Service, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.ListBoxFor(model => model.selectedBill_Service, (SelectList)ViewBag.ServicesList
                , new { @class = "form-control", multiple = "multiple", id = "servicesListBox" })
            @Html.ValidationMessageFor(model => model.selectedBill_Service, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.PrescriptionPrice, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PrescriptionPrice, new { htmlAttributes = new { @class = "form-control", id = "PrescriptionPrice" } })
            @Html.ValidationMessageFor(model => model.PrescriptionPrice, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.patid, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.patid, (SelectList)ViewBag.PatientsList, "Chọn bệnh nhân", htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.patid, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Prescriptions, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(
                model => model.selectedPrescription,
                new SelectList(ViewBag.Prescriptions, "id", "id", ViewBag.SelectedPrescription),
                "Chọn toa thuốc",
                htmlAttributes: new { @class = "form-control", id = "prescriptionDropdown" })
            @Html.ValidationMessageFor(model => model.selectedPrescription, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.hide, "Ẩn", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @{
                    bool hide = (Model.hide ? true : false);
                }
                @Html.CheckBoxFor(model => hide)
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.new_order, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.new_order, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.new_order, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.meta, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.meta, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.meta, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.isPayed, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.CheckBoxFor(model => model.isPayed, new
                {
                    @onclick = Model.isPayed ? "return false;" : ""
                })
                @Html.ValidationMessageFor(model => model.isPayed, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Lưu" class="btn btn-info" @(Model.isPayed ? "disabled" : "") />
        </div>
    </div>
</div>
}

<div style="padding: 24px;">
    @Html.ActionLink("Quay lại", "Index")
</div>

@section Scripts
{
    <script>
        $(document).ready(function () {
            $("#totalPrice").val(0);
            $("#PrescriptionPrice").val(0);
            $("#ServicesPrice").val(@ViewBag.ServicesPriceTotal || 0);


            // Ensure prescriptionDropdown exists and trigger change event
            var selectedPrescriptionId = $("#prescriptionDropdown").val(); // Get the current selected value of the dropdown
            if (selectedPrescriptionId) {
                // Trigger prescription price update
                updatePrescriptionPrice(selectedPrescriptionId);
            }

            // Handle prescription change
            $(function () {
                $("#prescriptionDropdown").change(function () {
                    var selectedPrescriptionId = $(this).val(); // Get the selected prescription ID
                    if (selectedPrescriptionId) {
                        // Use AJAX to get the price for the selected prescription
                        updatePrescriptionPrice(selectedPrescriptionId);
                    } else {
                        // If no prescription is selected, clear the price field
                        $("#PrescriptionPrice").val(0);
                        updateTotalPrice();
                    }
                });
            });

            function updatePrescriptionPrice(selectedPrescriptionId) {
                $.ajax({
                    url: '@Url.Action("GetPrescriptionPrice", "Bills")',  // Controller action to get the price
                    data: { id: selectedPrescriptionId },  // Send selected prescription ID
                    success: function (data) {
                        // Set the PrescriptionPrice field with the returned data
                        $("#PrescriptionPrice").val(data);
                        updateTotalPrice();
                    },
                    error: function () {
                        alert("Failed to retrieve price.");
                    }
                });
            }

            $("#prescriptionDropdown").change()

            var servicePrices = @Html.Raw(Json.Encode(ViewBag.ServicePrices));
            // Function to update the ServicesPrice field based on selected services
            function updateServicesPrice() {
                totalPrice = 0
                $("#servicesListBox option:selected").each(function () {
                    var serviceId = $(this).val();
                    var price = servicePrices[serviceId];  // Assuming you've added price data in your ViewBag
                    if (price) {
                        totalPrice += price;
                        console.log(totalPrice)
                    }
                });

                // Update ServicesPrice field
                $("#ServicesPrice").val(totalPrice);
                updateTotalPrice();
            }

            // Call function on change event of ListBox
            $("#servicesListBox").change(function () {
                updateServicesPrice();
            });

            function updateTotalPrice() {
                var totalPrice = 0;

                // Add prescription price to the total
                var prescriptionPrice = parseInt($("#PrescriptionPrice").val()) || 0;
                totalPrice += prescriptionPrice;

                // Add service price to the total
                var servicesPrice = parseInt($("#ServicesPrice").val()) || 0;
                totalPrice += servicesPrice;



                // Update the totalPrice field
                $("#totalPrice").val(totalPrice);
            }
        });


    </script>
    <script>
        $(function () {
            $("#name").keyup(function () {
                var text = $.trim($(this).val().toLowerCase());
                var text_create;

                // Thay thế các ký tự có dấu thành không dấu
                text_create = text
                    .replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ẳ|ẵ|ặ/g, "a")
                    .replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e")
                    .replace(/ì|í|ị|ỉ|ĩ/g, "i")
                    .replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o")
                    .replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u")
                    .replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y")
                    .replace(/đ/g, "d")
                    .replace(/\ /g, '-'); // Thay thế khoảng trắng thành dấu '-'
                $("#meta").val(text_create);
            }).keyup();
        });
    </script>
}
